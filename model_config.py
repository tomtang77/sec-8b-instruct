import os

# цибхЮЛщЕНч╜оцЦЗф╗╢
# цВихПпф╗ехЬищАЩшгбшинхоЪф╜┐чФицЬмхЬ░цибхЮЛцИЦщБачлпцибхЮЛ

# ========== щЕНч╜ощБ╕щаЕ ==========

# щБ╕щаЕ1: ф╜┐чФицЬмхЬ░цибхЮЛ (цОишЦжя╝МхжВцЮЬцВих╖▓ч╢Уф╕Лш╝ЙцибхЮЛ)
USE_LOCAL_MODEL = False  # шинчВ║Trueф╜┐чФицЬмхЬ░цибхЮЛя╝МFalseф╜┐чФищБачлпцибхЮЛ

# цЬмхЬ░цибхЮЛш╖пх╛С (хжВцЮЬUSE_LOCAL_MODEL=True)
# шлЛф┐оцФ╣чВ║цВичЪДхпжщЪЫцибхЮЛш╖пх╛Ся╝Мф╛ЛхжВ: "/home/user/models/Foundation-Sec-8B-Instruct"
LOCAL_MODEL_PATH = "/path/to/your/local/model"

# щБачлпцибхЮЛID (хжВцЮЬUSE_LOCAL_MODEL=False)
REMOTE_MODEL_ID = "fdtn-ai/Foundation-Sec-8B-Instruct"

# ========== шЗкхЛХщЕНч╜о ==========

def get_model_config():
    """
    ца╣цУЪщЕНч╜ош┐ФхЫЮцибхЮЛчЫ╕щЧЬшинхоЪ
    
    Returns:
        tuple: (model_path_or_id, need_token, token)
    """
    
    if USE_LOCAL_MODEL:
        # ф╜┐чФицЬмхЬ░цибхЮЛ
        if not os.path.exists(LOCAL_MODEL_PATH):
            raise FileNotFoundError(f"цЬмхЬ░цибхЮЛш╖пх╛Сф╕НхнШхЬи: {LOCAL_MODEL_PATH}")
        
        return LOCAL_MODEL_PATH, False, None
    
    else:
        # ф╜┐чФищБачлпцибхЮЛ
        hf_token = os.getenv("HF_TOKEN")
        if not hf_token:
            print("тЪая╕П  шнжхСК: ф╜┐чФищБачлпцибхЮЛф╜ЖцЬкшинхоЪHF_TOKENчТ░хвГшоКцХ╕")
            print("    хжВцЮЬцибхЮЛцШпчзБцЬЙчЪДя╝МхПпшГ╜цЬГф╕Лш╝Йхд▒цХЧ")
        
        return REMOTE_MODEL_ID, True, hf_token

def print_model_info():
    """щбпчд║чХ╢хЙНцибхЮЛщЕНч╜ош│ЗшиК"""
    model_path, need_token, token = get_model_config()
    
    print("=" * 50)
    print("ЁЯдЦ цибхЮЛщЕНч╜ош│ЗшиК")
    print("=" * 50)
    
    if USE_LOCAL_MODEL:
        print(f"ЁЯУВ ф╜┐чФицЬмхЬ░цибхЮЛ: {model_path}")
        print(f"ЁЯФС щЬАшжБHF_TOKEN: хРж")
        print(f"тЬЕ цибхЮЛш╖пх╛СхнШхЬи: {os.path.exists(model_path)}")
    else:
        print(f"ЁЯМР ф╜┐чФищБачлпцибхЮЛ: {model_path}")
        print(f"ЁЯФС щЬАшжБHF_TOKEN: цШп")
        print(f"тЬЕ HF_TOKENх╖▓шинхоЪ: {'цШп' if token else 'хРж'}")
    
    print("=" * 50)

# х┐лщАЯщЕНч╜охЗ╜цХ╕
def setup_local_model(model_path: str):
    """
    х┐лщАЯшинхоЪцЬмхЬ░цибхЮЛ
    
    Args:
        model_path (str): цЬмхЬ░цибхЮЛш╖пх╛С
    """
    global USE_LOCAL_MODEL, LOCAL_MODEL_PATH
    USE_LOCAL_MODEL = True
    LOCAL_MODEL_PATH = model_path
    print(f"тЬЕ х╖▓шинхоЪф╜┐чФицЬмхЬ░цибхЮЛ: {model_path}")

def setup_remote_model(model_id: str = None):
    """
    х┐лщАЯшинхоЪщБачлпцибхЮЛ
    
    Args:
        model_id (str, optional): щБачлпцибхЮЛIDя╝МщаРшинф╜┐чФицЧвцЬЙшинхоЪ
    """
    global USE_LOCAL_MODEL, REMOTE_MODEL_ID
    USE_LOCAL_MODEL = False
    if model_id:
        REMOTE_MODEL_ID = model_id
    print(f"тЬЕ х╖▓шинхоЪф╜┐чФищБачлпцибхЮЛ: {REMOTE_MODEL_ID}")

if __name__ == "__main__":
    # щбпчд║чХ╢хЙНщЕНч╜о
    print_model_info()
